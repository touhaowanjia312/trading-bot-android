name: 🤖 构建Android应用

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: ☕ 设置Java环境
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '8'
        
    - name: 📦 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip \
          build-essential libsdl2-dev libsdl2-image-dev \
          libsdl2-mixer-dev libsdl2-ttf-dev libportmidi-dev \
          libswscale-dev libavformat-dev libavcodec-dev \
          zlib1g-dev autoconf libtool pkg-config \
          libffi-dev libssl-dev
          
    - name: 🐍 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython
        pip install "kivy[base]==2.1.0"
        
    - name: 📱 设置Android SDK (改进版)
      run: |
        # 设置环境变量
        export ANDROID_HOME=$HOME/Android/Sdk
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        mkdir -p $ANDROID_HOME
        
        # 下载并解压SDK工具
        cd $ANDROID_HOME
        echo "下载Android SDK命令行工具..."
        curl -s -O https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        
        # 重新组织目录结构
        mv cmdline-tools latest
        mkdir cmdline-tools
        mv latest cmdline-tools/
        rm commandlinetools-linux-9477386_latest.zip
        
        # 设置PATH
        export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
        
        # 设置环境变量到GitHub Actions
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
        echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
        
        # 接受许可证（静默模式）
        echo "接受SDK许可证..."
        yes | sdkmanager --licenses > /dev/null 2>&1 || true
        
        # 安装必要的SDK组件
        echo "安装SDK组件..."
        sdkmanager --install "platforms;android-33" > /dev/null 2>&1
        sdkmanager --install "build-tools;33.0.0" > /dev/null 2>&1
        sdkmanager --install "ndk;25.2.9519653" > /dev/null 2>&1
        
        echo "✅ Android SDK设置完成"
        
    - name: 🔧 检查和准备构建文件
      run: |
        echo "📋 当前目录文件："
        ls -la
        
        # 确保有simple_mobile_app.py文件
        if [ ! -f "simple_mobile_app.py" ]; then
          echo "❌ 缺少 simple_mobile_app.py，创建简化版本..."
          cat > simple_mobile_app.py << 'EOF'
#!/usr/bin/env python3
"""
简化版Android交易应用
"""

from kivy.app import App
from kivy.uix.label import Label

class SimpleApp(App):
    def build(self):
        return Label(text='Android交易跟单机器人\n构建测试成功！')

if __name__ == '__main__':
    SimpleApp().run()
EOF
        fi
        
        # 创建或更新buildozer.spec
        if [ ! -f "buildozer.spec" ]; then
          echo "📝 创建 buildozer.spec"
          buildozer init
        fi
        
        # 修改配置
        sed -i 's/title = My Application/title = 交易跟单机器人/' buildozer.spec
        sed -i 's/package.name = myapp/package.name = tradingbot/' buildozer.spec
        sed -i 's/package.domain = org.example/package.domain = com.tradingbot/' buildozer.spec
        sed -i 's/source.main = main.py/source.main = simple_mobile_app.py/' buildozer.spec
        sed -i 's/requirements = python3,kivy/requirements = python3,kivy==2.1.0/' buildozer.spec
        sed -i 's/#android.permissions = INTERNET/android.permissions = INTERNET,ACCESS_NETWORK_STATE/' buildozer.spec
        
        echo "✅ 构建文件准备完成"
        
    - name: 🔨 构建Android APK
      run: |
        echo "🚀 开始构建Android APK..."
        
        # 确保环境变量正确
        export ANDROID_HOME=$HOME/Android/Sdk
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH
        
        # 显示环境信息
        echo "📊 环境信息："
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "Python版本: $(python --version)"
        echo "Java版本: $(java -version 2>&1 | head -1)"
        
        # 开始构建
        echo "开始buildozer构建..."
        buildozer android debug --verbose
        
    - name: 📊 显示构建结果
      run: |
        echo "📦 构建完成检查："
        
        if [ -d "bin" ]; then
          echo "📱 bin目录内容:"
          ls -la bin/
          
          # 查找APK文件
          apk_files=$(find bin -name "*.apk" -type f)
          if [ -n "$apk_files" ]; then
            echo "🎉 找到APK文件:"
            for apk in $apk_files; do
              echo "📏 $apk ($(du -h "$apk" | cut -f1))"
            done
          else
            echo "❌ 未找到APK文件"
          fi
        else
          echo "❌ bin目录不存在"
          echo "📋 当前目录内容:"
          ls -la
        fi
        
    - name: 📤 上传APK文件
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: android-apk
        path: bin/*.apk
        retention-days: 30
        
    - name: 📤 上传构建日志（如果失败）
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs
        path: |
          .buildozer/
          *.log
        retention-days: 7
