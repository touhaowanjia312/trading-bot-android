name: 🚀 超稳定Android构建

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: ☕ 设置Java环境
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: 📦 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3-dev \
          python3-pip \
          python3-setuptools \
          python3-wheel \
          libffi-dev \
          libssl-dev \
          libjpeg-dev \
          zlib1g-dev \
          libfreetype6-dev \
          liblcms2-dev \
          libopenjp2-7-dev \
          libtiff5-dev \
          libwebp-dev \
          tcl8.6-dev \
          tk8.6-dev \
          python3-tk \
          libharfbuzz-dev \
          libfribidi-dev \
          libxcb1-dev \
          unzip \
          wget \
          curl
          
    - name: 🐍 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools
        pip install buildozer cython
        pip install kivy==2.1.0
        
    - name: 📱 使用预配置Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 30
        build-tools: 30.0.3
        ndk-version: 23.2.8568313
        
    - name: 🔧 验证Android环境
      run: |
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        ls -la $ANDROID_HOME/ || echo "Android目录不存在"
        which adb || echo "adb未找到"
        
    - name: 📝 创建必要文件
      run: |
        # 创建简单的Kivy应用
        cat > simple_mobile_app.py << 'EOF'
        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-
        """
        简单的移动端交易机器人应用
        """
        
        try:
            from kivy.app import App
            from kivy.uix.boxlayout import BoxLayout
            from kivy.uix.label import Label
            from kivy.uix.button import Button
            from kivy.clock import Clock
            KIVY_AVAILABLE = True
        except ImportError:
            print("⚠️ Kivy未安装，将使用控制台模式")
            KIVY_AVAILABLE = False
            
            # 创建占位符类
            class BoxLayout:
                def __init__(self, **kwargs):
                    pass
                def add_widget(self, widget):
                    pass
                    
            class Label:
                def __init__(self, **kwargs):
                    self.text = kwargs.get('text', '')
                    
            class Button:
                def __init__(self, **kwargs):
                    self.text = kwargs.get('text', '')
                    
            class Clock:
                @staticmethod
                def schedule_interval(func, interval):
                    pass
                    
            class App:
                def build(self):
                    return None
                def run(self):
                    print("🖥️ 控制台模式运行")
        
        import asyncio
        import threading
        import time
        from datetime import datetime
        
        class SimpleTradingApp(App):
            def __init__(self, **kwargs):
                super().__init__(**kwargs)
                self.title = "📱 移动交易机器人"
                self.status = "🔴 未连接"
                self.is_running = False
                
            def build(self):
                if not KIVY_AVAILABLE:
                    print("📱 移动交易机器人 - 控制台模式")
                    return None
                    
                # 主布局
                main_layout = BoxLayout(orientation='vertical', padding=10, spacing=10)
                
                # 状态显示
                self.status_label = Label(
                    text=f"状态: {self.status}",
                    size_hint_y=None,
                    height=50
                )
                main_layout.add_widget(self.status_label)
                
                # 控制按钮
                btn_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
                
                start_btn = Button(text="🚀 启动")
                start_btn.bind(on_press=self.start_bot)
                btn_layout.add_widget(start_btn)
                
                stop_btn = Button(text="⏹️ 停止")
                stop_btn.bind(on_press=self.stop_bot)
                btn_layout.add_widget(stop_btn)
                
                main_layout.add_widget(btn_layout)
                
                # 日志显示
                self.log_label = Label(
                    text="📋 等待启动...",
                    text_size=(None, None),
                    valign='top'
                )
                main_layout.add_widget(self.log_label)
                
                # 定时更新状态
                Clock.schedule_interval(self.update_status, 1.0)
                
                return main_layout
                
            def start_bot(self, instance):
                self.is_running = True
                self.status = "🟢 运行中"
                self.log("🚀 交易机器人已启动")
                
            def stop_bot(self, instance):
                self.is_running = False
                self.status = "🔴 已停止"
                self.log("⏹️ 交易机器人已停止")
                
            def update_status(self, dt):
                if hasattr(self, 'status_label'):
                    self.status_label.text = f"状态: {self.status} | 时间: {datetime.now().strftime('%H:%M:%S')}"
                    
            def log(self, message):
                timestamp = datetime.now().strftime('%H:%M:%S')
                log_message = f"[{timestamp}] {message}"
                print(log_message)
                
                if hasattr(self, 'log_label'):
                    current_text = self.log_label.text
                    lines = current_text.split('\n')
                    if len(lines) > 10:  # 保持最新10行
                        lines = lines[-9:]
                    lines.append(log_message)
                    self.log_label.text = '\n'.join(lines)
        
        if __name__ == '__main__':
            app = SimpleTradingApp()
            if KIVY_AVAILABLE:
                app.run()
            else:
                print("📱 简单交易应用 - 控制台版本")
                print("✅ 应用创建成功")
                print("🎯 这是一个用于Android构建测试的简化版本")
        EOF
        
        # 创建buildozer配置
        cat > buildozer.spec << 'EOF'
        [app]
        title = 交易机器人
        package.name = tradingbot
        package.domain = com.tradingbot.app
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas,txt,json
        version = 1.0
        requirements = python3,kivy==2.1.0
        [buildozer]
        log_level = 2
        warn_on_root = 0
        EOF
        
    - name: 🏗️ 构建Android APK
      run: |
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
        
        echo "🔨 开始构建APK..."
        buildozer android debug --verbose || {
          echo "❌ 构建失败，查看详细日志..."
          cat .buildozer/android/platform/build-*/build.log || echo "日志文件不存在"
          exit 1
        }
        
    - name: 📋 显示构建结果
      run: |
        echo "🎉 构建完成！"
        ls -la bin/ || echo "bin目录不存在"
        find . -name "*.apk" -type f || echo "未找到APK文件"
        
    - name: 📤 上传APK文件
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: android-apk
        path: |
          bin/*.apk
          .buildozer/android/platform/build-*/build.log
        retention-days: 30
