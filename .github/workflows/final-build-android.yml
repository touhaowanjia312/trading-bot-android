name: 🤖 官方SDK版Android构建

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: ☕ 设置Java环境
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'  # 升级到Java 17以兼容最新的Android SDK工具
        
    - name: 📱 使用官方Android Setup Action
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 8512546
        accept-android-sdk-licenses: true
        packages: "platform-tools platforms;android-30 build-tools;30.0.3 ndk;21.4.7075529"
        
    - name: 🔧 验证Android环境
      run: |
        echo "=== Android环境验证 ==="
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        
        echo "=== SDK目录结构 ==="
        ls -la $ANDROID_HOME/ || echo "ANDROID_HOME目录不存在"
        
        echo "=== Build Tools检查 ==="
        ls -la $ANDROID_HOME/build-tools/ || echo "build-tools目录不存在"
        
        echo "=== 检查aidl工具 ==="
        find $ANDROID_HOME -name "aidl" -type f 2>/dev/null | head -5
        
        echo "=== 环境变量 ==="
        env | grep ANDROID
        
    - name: 📦 安装系统依赖
      run: |
        sudo apt-get update -qq
        
        # 启用32位架构支持
        sudo dpkg --add-architecture i386
        sudo apt-get update -qq
        
        # 安装主要依赖
        sudo apt-get install -y \
          build-essential \
          git \
          python3-dev \
          python3-pip \
          python3-setuptools \
          python3-wheel \
          libffi-dev \
          libssl-dev \
          libjpeg-dev \
          zlib1g-dev \
          unzip \
          autoconf \
          libtool \
          libtool-bin \
          automake \
          pkg-config \
          cmake \
          ninja-build \
          ccache \
          wget \
          curl
        
        # 尝试安装32位库（Ubuntu 24.04兼容）
        sudo apt-get install -y \
          libc6:i386 \
          libstdc++6:i386 \
          zlib1g:i386 || echo "⚠️ 某些32位库安装失败，但可能不影响构建"
          
    - name: 🐍 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools
        pip install buildozer==1.4.0
        pip install cython==0.29.33
        pip install kivy==2.1.0
        
    - name: 📝 创建应用文件
      run: |
        cat > main.py << 'EOF'
        #!/usr/bin/env python3
        from kivy.app import App
        from kivy.uix.label import Label
        
        class TradingApp(App):
            def build(self):
                return Label(text='📱 交易机器人\n构建成功！', 
                           font_size=20, 
                           halign='center')
        
        if __name__ == '__main__':
            TradingApp().run()
        EOF
        
        cat > buildozer.spec << 'EOF'
        [app]
        title = TradingBot
        package.name = tradingbot
        package.domain = com.example.tradingbot
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas
        source.main = main.py
        version = 1.0
        requirements = python3,kivy
        
        [buildozer]
        log_level = 2
        warn_on_root = 0
        
        [app:android]
        android.api = 30
        android.minapi = 21
        android.ndk = 21.4.7075529
        android.sdk = 30
        android.accept_sdk_license = True
        android.arch = arm64-v8a
        android.gradle_dependencies = 
        android.add_compile_options = 
        android.add_gradle_repositories = 
        android.add_packaging_options = 
        EOF
        
    - name: 🔧 修复buildozer Android路径
      run: |
        echo "=== 修复buildozer的Android SDK路径 ==="
        
        # 确保buildozer能找到Android SDK
        mkdir -p ~/.buildozer/android/platform
        
        # 创建符号链接指向正确的SDK位置
        if [ -d "$ANDROID_HOME" ]; then
          ln -sf "$ANDROID_HOME" ~/.buildozer/android/platform/android-sdk
          echo "✅ 创建SDK符号链接: $ANDROID_HOME -> ~/.buildozer/android/platform/android-sdk"
          
          # 创建tools目录和sdkmanager的符号链接（兼容旧版buildozer）
          mkdir -p ~/.buildozer/android/platform/android-sdk/tools/bin
          ln -sf "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ~/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager
          echo "✅ 创建sdkmanager符号链接以兼容旧版buildozer"
        fi
        
        # 确保PATH包含所有必要的工具
        export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/30.0.3:$PATH"
        
        echo "=== 最终环境检查 ==="
        which aidl || echo "⚠️ aidl仍未在PATH中"
        find $ANDROID_HOME -name "aidl" -type f | head -1 | xargs ls -la || echo "❌ 找不到aidl文件"
        
        echo "=== 验证sdkmanager链接 ==="
        ls -la ~/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager || echo "sdkmanager链接不存在"
        
    - name: 🏗️ 构建Android APK
      run: |
        echo "🔨 开始构建APK..."
        
        echo "=== 最终环境信息 ==="
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        java -version
        python --version
        
        # 确保PATH正确
        export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/30.0.3:$PATH"
        
        echo "=== PATH检查 ==="
        echo $PATH | tr ':' '\n' | grep android || echo "PATH中没有android相关路径"
        
        # 显示buildozer配置
        echo "=== Buildozer配置 ==="
        cat buildozer.spec
        
        rm -rf .buildozer
        
        # 构建APK - 使用更详细的日志
        echo "🚀 开始buildozer构建..."
        buildozer android debug --verbose 2>&1 | tee build_complete.log || {
          echo "❌ 构建失败！"
          echo "=== 最后200行构建日志 ==="
          tail -200 build_complete.log
          echo ""
          echo "=== 搜索关键错误 ==="
          grep -i "error\|fail\|exception\|traceback" build_complete.log | tail -30 || echo "未找到关键错误信息"
          echo ""
          echo "=== Python-for-Android相关错误 ==="
          grep -i "pythonforandroid\|p4a" build_complete.log | tail -20 || echo "未找到p4a相关错误"
          exit 1
        }
        
        echo "✅ 构建命令执行完成"
        
    - name: 🔍 超级详细APK搜索
      run: |
        echo "🔍 开始超级详细APK搜索..."
        
        echo "=== 根目录搜索 ==="
        find . -maxdepth 3 -name "*.apk" -type f 2>/dev/null | while read apk; do
          echo "📱 根目录找到APK: $apk"
          ls -lh "$apk"
          file "$apk"
        done
        
        echo "=== 深度搜索所有APK ==="
        find . -name "*.apk" -type f 2>/dev/null | head -20 | while read apk; do
          echo "📱 深度搜索找到APK: $apk"
          ls -lh "$apk"
        done
        
        echo "=== 检查标准输出目录 ==="
        for dir in "bin" ".buildozer/android/platform/build-*/build/outputs/apk" ".buildozer/android/platform/build-*/dist"; do
          if [ -d "$dir" ] 2>/dev/null; then
            echo "检查目录: $dir"
            find "$dir" -name "*.apk" -type f 2>/dev/null | head -5
          fi
        done
        
        echo "=== 检查buildozer分发目录 ==="
        find .buildozer -path "*/dist/*" -name "*.apk" -type f 2>/dev/null | head -10
        
        echo "=== 检查gradle输出 ==="
        find .buildozer -path "*/outputs/apk*" -type d 2>/dev/null | while read dir; do
          echo "Gradle输出目录: $dir"
          ls -la "$dir/" 2>/dev/null | head -10
        done
        
    - name: 📤 上传超级完整构建产物
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: super-complete-android-build
        path: |
          **/*.apk
          bin/
          dist/
          .buildozer/android/platform/build-*/build/outputs/
          .buildozer/android/platform/build-*/dist/
          build_complete.log
        retention-days: 30
        
    - name: 📋 最终构建报告
      if: always()
      run: |
        echo "📊 最终构建报告"
        echo "=================="
        
        total_apks=$(find . -name "*.apk" -type f 2>/dev/null | wc -l)
        echo "🎯 总共找到APK文件: $total_apks 个"
        
        if [ $total_apks -gt 0 ]; then
          echo "✅ 🎉 APK构建成功！"
          echo "=== APK文件列表 ==="
          find . -name "*.apk" -type f -exec ls -lh {} \; | head -10
          
          echo "=== 最大的APK文件 ==="
          find . -name "*.apk" -type f -exec ls -lh {} \; | sort -k5 -hr | head -3
        else
          echo "❌ 仍然未找到APK文件"
          echo ""
          echo "🔍 可能的原因和调试信息："
          echo "1. 检查上传的 build_complete.log 文件"
          echo "2. 构建可能在某个隐藏步骤失败了"
          echo "3. APK可能生成在了非标准位置"
          echo ""
          echo "=== buildozer目录结构 ==="
          find .buildozer -type d -name "*apk*" 2>/dev/null | head -10 || echo "没有apk相关目录"
        fi
