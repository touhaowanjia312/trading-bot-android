name: 🤖 最终修复版Android构建

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: ☕ 设置Java环境
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
        
    - name: 📦 安装系统依赖
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          build-essential \
          git \
          python3-dev \
          python3-pip \
          python3-setuptools \
          python3-wheel \
          libffi-dev \
          libssl-dev \
          libjpeg-dev \
          zlib1g-dev \
          unzip \
          wget \
          curl \
          autoconf \
          libtool \
          pkg-config
          
    - name: 🐍 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools
        pip install buildozer==1.4.0
        pip install cython==0.29.33
        pip install kivy==2.1.0
        
    - name: 📱 手动设置Android SDK
      run: |
        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/30.0.3
        
        mkdir -p $ANDROID_HOME/cmdline-tools
        
        cd $ANDROID_HOME/cmdline-tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip
        unzip -q commandlinetools-linux-8512546_latest.zip
        mv cmdline-tools latest
        
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
          "platform-tools" \
          "platforms;android-30" \
          "build-tools;30.0.3" \
          "ndk;21.4.7075529"
        
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
        echo "PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/30.0.3" >> $GITHUB_ENV
        
    - name: 📝 创建应用文件
      run: |
        cat > main.py << 'EOF'
        #!/usr/bin/env python3
        from kivy.app import App
        from kivy.uix.label import Label
        
        class TradingApp(App):
            def build(self):
                return Label(text='📱 交易机器人\n构建成功！', 
                           font_size=20, 
                           halign='center')
        
        if __name__ == '__main__':
            TradingApp().run()
        EOF
        
        cat > buildozer.spec << 'EOF'
        [app]
        title = TradingBot
        package.name = tradingbot
        package.domain = com.example.tradingbot
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas
        source.main = main.py
        version = 1.0
        requirements = python3,kivy
        
        [buildozer]
        log_level = 2
        warn_on_root = 0
        
        [app:android]
        android.api = 30
        android.minapi = 21
        android.ndk = 21.4.7075529
        android.sdk = 30
        android.accept_sdk_license = True
        android.gradle_dependencies = 
        android.add_compile_options = 
        android.add_gradle_repositories = 
        android.add_packaging_options = 
        EOF
        
    - name: 🏗️ 构建Android APK
      run: |
        echo "🔨 开始构建APK..."
        
        echo "环境信息:"
        echo "ANDROID_HOME: $ANDROID_HOME"
        java -version
        python --version
        
        rm -rf .buildozer
        
        # 构建APK并捕获所有输出
        buildozer android debug --verbose > build_full.log 2>&1 || {
          echo "❌ 构建失败！"
          echo "=== 最后100行构建日志 ==="
          tail -100 build_full.log
          echo "=== 错误信息 ==="
          grep -i "error\|fail\|exception" build_full.log | tail -30 || echo "未找到明确错误"
          exit 1
        }
        
        echo "✅ 构建命令执行完成"
        
    - name: 🔍 全面搜索APK文件
      run: |
        echo "🔍 开始全面搜索APK文件..."
        
        echo "=== 当前目录结构 ==="
        ls -la
        
        echo "=== 搜索所有APK文件 ==="
        find . -name "*.apk" -type f 2>/dev/null | while read apk; do
          echo "📱 找到APK: $apk"
          ls -lh "$apk"
          file "$apk"
        done
        
        echo "=== 检查bin目录 ==="
        if [ -d "bin" ]; then
          ls -la bin/
        else
          echo "bin目录不存在"
        fi
        
        echo "=== 检查buildozer目录结构 ==="
        if [ -d ".buildozer" ]; then
          echo "buildozer目录存在，查找APK..."
          find .buildozer -name "*.apk" -type f 2>/dev/null | head -10
          
          echo "=== 检查gradle输出目录 ==="
          find .buildozer -path "*/build/outputs/apk*" -type d 2>/dev/null | while read dir; do
            echo "检查目录: $dir"
            ls -la "$dir" 2>/dev/null || echo "目录为空或无法访问"
          done
        else
          echo ".buildozer目录不存在"
        fi
        
        echo "=== 检查构建日志中的APK路径 ==="
        if [ -f "build_full.log" ]; then
          echo "搜索构建日志中的APK相关信息:"
          grep -i "\.apk\|apk.*created\|apk.*generated\|output.*apk" build_full.log | tail -10 || echo "日志中未找到APK信息"
        fi
        
    - name: 📤 上传所有构建产物
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: android-build-complete
        path: |
          **/*.apk
          bin/
          .buildozer/android/platform/build-*/build/outputs/
          build_full.log
        retention-days: 30
        
    - name: 📋 构建总结
      if: always()
      run: |
        echo "📊 构建总结报告"
        echo "=================="
        
        apk_count=$(find . -name "*.apk" -type f 2>/dev/null | wc -l)
        echo "🎯 找到APK文件数量: $apk_count"
        
        if [ $apk_count -gt 0 ]; then
          echo "✅ APK构建成功！"
          find . -name "*.apk" -type f -exec ls -lh {} \;
        else
          echo "❌ 未找到APK文件"
          echo "可能的原因:"
          echo "1. 构建过程虽然没报错，但实际失败了"
          echo "2. APK生成在了意外的位置"
          echo "3. Buildozer配置有问题"
          echo ""
          echo "请检查上传的构建日志 build_full.log 获取详细信息"
        fi
