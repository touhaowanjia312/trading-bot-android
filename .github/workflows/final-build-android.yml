name: 🤖 官方SDK版Android构建

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: ☕ 设置Java环境
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'  # 升级到Java 17以兼容最新的Android SDK工具
        
    - name: 📱 使用官方Android Setup Action
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 8512546
        accept-android-sdk-licenses: true
        packages: "platform-tools platforms;android-30 build-tools;30.0.3 ndk;21.4.7075529"
        
    - name: 🔧 验证Android环境
      run: |
        echo "=== Android环境验证 ==="
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        
        echo "=== SDK目录结构 ==="
        ls -la $ANDROID_HOME/ || echo "ANDROID_HOME目录不存在"
        
        echo "=== Build Tools检查 ==="
        ls -la $ANDROID_HOME/build-tools/ || echo "build-tools目录不存在"
        
        echo "=== 检查aidl工具 ==="
        find $ANDROID_HOME -name "aidl" -type f 2>/dev/null | head -5
        
        echo "=== 环境变量 ==="
        env | grep ANDROID
        
    - name: 📦 安装系统依赖
      run: |
        sudo apt-get update -qq
        
        # 启用32位架构支持
        sudo dpkg --add-architecture i386
        sudo apt-get update -qq
        
        # 安装主要依赖
        sudo apt-get install -y \
          build-essential \
          git \
          python3-dev \
          python3-pip \
          python3-setuptools \
          python3-wheel \
          libffi-dev \
          libssl-dev \
          libjpeg-dev \
          zlib1g-dev \
          unzip \
          autoconf \
          libtool \
          libtool-bin \
          automake \
          pkg-config \
          cmake \
          ninja-build \
          ccache \
          wget \
          curl
        
        # 尝试安装32位库（Ubuntu 24.04兼容）
        sudo apt-get install -y \
          libc6:i386 \
          libstdc++6:i386 \
          zlib1g:i386 || echo "⚠️ 某些32位库安装失败，但可能不影响构建"
          
    - name: 🐍 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools
        pip install buildozer==1.4.0
        pip install cython==0.29.33
        pip install kivy==2.1.0
        
    - name: 📝 创建应用文件
      run: |
        cat > main.py << 'EOF'
        #!/usr/bin/env python3
        """
        WebView版交易机器人Android应用
        使用HTML界面，避免复杂的原生依赖
        """
        import sys
        import os
        
        # 创建简单的HTML界面
        html_content = """
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>交易机器人</title>
            <style>
                body { 
                    font-family: Arial, sans-serif; 
                    margin: 20px; 
                    background: #f0f0f0;
                }
                .container { 
                    max-width: 400px; 
                    margin: 0 auto; 
                    background: white; 
                    padding: 20px; 
                    border-radius: 10px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                }
                h1 { 
                    color: #333; 
                    text-align: center;
                    margin-bottom: 30px;
                }
                .status { 
                    background: #e8f5e8; 
                    padding: 15px; 
                    border-radius: 5px; 
                    margin: 10px 0;
                    border-left: 4px solid #4CAF50;
                }
                .button { 
                    background: #4CAF50; 
                    color: white; 
                    padding: 12px 24px; 
                    border: none; 
                    border-radius: 5px; 
                    cursor: pointer;
                    width: 100%;
                    margin: 10px 0;
                    font-size: 16px;
                }
                .button:hover { 
                    background: #45a049; 
                }
                .info { 
                    color: #666; 
                    font-size: 14px;
                    text-align: center;
                    margin-top: 20px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>📱 交易机器人</h1>
                <div class="status">
                    <strong>✅ 应用状态:</strong> 运行中<br>
                    <strong>🔧 版本:</strong> 1.0<br>
                    <strong>📊 架构:</strong> arm64-v8a<br>
                    <strong>🌐 界面:</strong> WebView
                </div>
                <button class="button" onclick="showStatus()">📊 显示状态</button>
                <button class="button" onclick="showInfo()">ℹ️ 应用信息</button>
                <div id="output" class="status" style="display:none;">
                    <div id="outputText"></div>
                </div>
                <div class="info">
                    交易机器人 Android版<br>
                    构建成功！🎉
                </div>
            </div>
            
            <script>
                function showStatus() {
                    const output = document.getElementById('output');
                    const text = document.getElementById('outputText');
                    text.innerHTML = `
                        <strong>📊 机器人状态:</strong> 运行中<br>
                        <strong>🔗 连接状态:</strong> 正常<br>
                        <strong>💰 当前余额:</strong> 模拟模式<br>
                        <strong>⏰ 更新时间:</strong> ${new Date().toLocaleString()}
                    `;
                    output.style.display = 'block';
                }
                
                function showInfo() {
                    const output = document.getElementById('output');
                    const text = document.getElementById('outputText');
                    text.innerHTML = `
                        <strong>📱 应用名称:</strong> 交易机器人<br>
                        <strong>🔧 版本:</strong> 1.0<br>
                        <strong>🏗️ 构建方式:</strong> Python-for-Android<br>
                        <strong>🌐 界面技术:</strong> WebView + HTML<br>
                        <strong>📊 架构:</strong> arm64-v8a
                    `;
                    output.style.display = 'block';
                }
            </script>
        </body>
        </html>
        """
        
        def main():
            print("📱 交易机器人 WebView版启动")
            
            # 为webview bootstrap创建HTML文件
            try:
                with open('index.html', 'w', encoding='utf-8') as f:
                    f.write(html_content)
                print("✅ HTML界面文件已创建")
            except Exception as e:
                print(f"❌ 创建HTML文件失败: {e}")
            
            print("🌐 WebView应用已准备就绪")
            print("📊 应用信息:")
            print("  - 名称: 交易机器人")
            print("  - 版本: 1.0")
            print("  - 架构: arm64-v8a")
            print("  - 界面: WebView + HTML")
            
            # 保持应用运行
            try:
                import time
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                print("\n👋 应用退出")
        
        if __name__ == '__main__':
            main()
        EOF
        
        cat > buildozer.spec << 'EOF'
        [app]
        title = TradingBot
        package.name = tradingbot
        package.domain = com.example.tradingbot
        source.dir = .
        source.include_exts = py
        source.main = main.py
        version = 1.0
        requirements = python3
        
        [buildozer]
        log_level = 2
        warn_on_root = 0
        
        [app:android]
        android.api = 30
        android.minapi = 21
        android.ndk = 26.3.11579264
        android.sdk = 30
        android.accept_sdk_license = True
        android.arch = arm64-v8a
        android.debug_artifact = apk
        EOF
        
    - name: 🔧 修复buildozer Android路径
      run: |
        echo "=== 修复buildozer的Android SDK路径 ==="
        
        # 确保buildozer能找到Android SDK
        mkdir -p ~/.buildozer/android/platform
        
        # 创建符号链接指向正确的SDK位置
        if [ -d "$ANDROID_HOME" ]; then
          ln -sf "$ANDROID_HOME" ~/.buildozer/android/platform/android-sdk
          echo "✅ 创建SDK符号链接: $ANDROID_HOME -> ~/.buildozer/android/platform/android-sdk"
          
          # 创建tools目录和sdkmanager的符号链接（兼容旧版buildozer）
          mkdir -p ~/.buildozer/android/platform/android-sdk/tools/bin
          ln -sf "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ~/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager
          echo "✅ 创建sdkmanager符号链接以兼容旧版buildozer"
        fi
        
        # 确保PATH包含所有必要的工具
        export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/30.0.3:$PATH"
        
        echo "=== 最终环境检查 ==="
        which aidl || echo "⚠️ aidl仍未在PATH中"
        find $ANDROID_HOME -name "aidl" -type f | head -1 | xargs ls -la || echo "❌ 找不到aidl文件"
        
        echo "=== 验证sdkmanager链接 ==="
        ls -la ~/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager || echo "sdkmanager链接不存在"
        
    - name: 🏗️ 构建Android APK
      run: |
        echo "🔨 开始构建APK..."
        
        echo "=== 最终环境信息 ==="
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        java -version
        python --version
        
        # 确保PATH正确
        export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/30.0.3:$PATH"
        
        echo "=== PATH检查 ==="
        echo $PATH | tr ':' '\n' | grep android || echo "PATH中没有android相关路径"
        
        # 显示buildozer配置
        echo "=== Buildozer配置 ==="
        cat buildozer.spec
        
        # 完全清理所有缓存
        rm -rf .buildozer
        rm -rf ~/.buildozer/android/packages
        rm -rf ~/.buildozer/cache
        
        # 🚀 终极方案：直接使用Python-for-Android绕过buildozer
        echo "🔥 buildozer无视所有架构设置，直接使用Python-for-Android！"
        
        # 安装Python-for-Android
        pip install python-for-android
        
        # 设置环境变量 - 使用P4A推荐的NDK 25版本
        export ANDROID_HOME=/usr/local/lib/android/sdk
        export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk
        export ANDROID_NDK_HOME=/usr/local/lib/android/sdk/ndk/26.3.11579264
        export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/30.0.3:$PATH"
        
        echo "=== 直接使用P4A构建 ==="
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        
        echo "=== 验证NDK版本 ==="
        ls -la /usr/local/lib/android/sdk/ndk/ || echo "NDK目录不存在"
        
        echo "=== 检查NDK 26版本（P4A推荐的稳定版本） ==="
        if [ -d "/usr/local/lib/android/sdk/ndk/26.3.11579264" ]; then
          echo "✅ NDK 26.3.11579264 存在"
          ls -la /usr/local/lib/android/sdk/ndk/26.3.11579264/ | head -10
        else
          echo "❌ NDK 26.3.11579264 不存在，尝试其他版本"
          echo "可用的NDK版本："
          ls -la /usr/local/lib/android/sdk/ndk/
          # 尝试使用任何可用的NDK 25+版本（但不超过27）
          for ndk_dir in /usr/local/lib/android/sdk/ndk/*/; do
            ndk_version=$(basename "$ndk_dir")
            if [[ "$ndk_version" =~ ^([0-9]+) ]] && [ "${BASH_REMATCH[1]}" -ge 25 ] && [ "${BASH_REMATCH[1]}" -le 27 ]; then
              echo "🔄 使用稳定NDK版本: $ndk_dir"
              export ANDROID_NDK_HOME="$ndk_dir"
              break
            fi
          done
        fi
        
        echo "=== 最终NDK环境确认 ==="
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        
        # 修复autotools兼容性问题
        echo "=== 修复autotools兼容性 ==="
        sudo apt-get update -qq
        sudo apt-get install -y autotools-dev autoconf-archive
        
        echo "=== 验证autotools版本 ==="
        autoconf --version | head -1
        automake --version | head -1
        libtool --version | head -1
        
        # 创建发布目录
        mkdir -p dist
        
        # 直接使用Python-for-Android构建APK - 使用webview bootstrap避免SDL2依赖
        p4a apk --private . \
            --package=com.example.tradingbot \
            --name="TradingBot" \
            --version=1.0 \
            --bootstrap=webview \
            --requirements=python3 \
            --arch=arm64-v8a \
            --permission INTERNET \
            --permission WRITE_EXTERNAL_STORAGE \
            --permission READ_EXTERNAL_STORAGE \
            --orientation=portrait \
            --icon-name="TradingBot" \
            --release \
            --dist-name=tradingbot 2>&1 | tee p4a_build.log || {
          echo "❌ P4A webview构建失败，尝试service_only bootstrap..."
          
          # 尝试使用service_only bootstrap - 纯后台服务
          echo "🔧 尝试service_only bootstrap方案..."
          p4a apk --private . \
              --package=com.example.tradingbot \
              --name="TradingBot" \
              --version=1.0 \
              --bootstrap=service_only \
              --requirements=python3 \
              --arch=arm64-v8a \
              --permission INTERNET \
              --permission WRITE_EXTERNAL_STORAGE \
              --permission READ_EXTERNAL_STORAGE \
              --orientation=portrait \
              --icon-name="TradingBot" \
              --release \
              --dist-name=tradingbot \
              --debug 2>&1 | tee p4a_build_retry.log || {
            echo "❌ 所有P4A构建方案都失败了"
            echo "=== 最后的构建日志 ==="
            tail -100 p4a_build_retry.log
            exit 1
          }
        }
        
    - name: 🔍 超级详细APK搜索
      run: |
        echo "🔍 开始P4A APK搜索..."
        
        echo "=== P4A标准输出目录 ==="
        find . -name "*.apk" -type f 2>/dev/null | while read apk; do
          echo "📱 找到APK: $apk"
          ls -lh "$apk"
          file "$apk"
        done
        
        echo "=== 检查dist目录 ==="
        if [ -d "dist" ]; then
          echo "dist目录内容:"
          ls -la dist/
          find dist -name "*.apk" -type f 2>/dev/null
        fi
        
        echo "=== 检查当前目录 ==="
        ls -la *.apk 2>/dev/null || echo "当前目录无APK文件"
        
        echo "=== 深度搜索所有APK ==="
        find . -name "*.apk" -type f 2>/dev/null | head -20 | while read apk; do
          echo "📱 深度搜索找到APK: $apk"
          ls -lh "$apk"
        done
        
    - name: 📤 上传超级完整构建产物
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: super-complete-android-build
        path: |
          **/*.apk
          dist/
          p4a_build.log
          p4a_build_retry.log
          *.apk
        retention-days: 30
        
    - name: 📋 最终构建报告
      if: always()
      run: |
        echo "📊 P4A构建最终报告"
        echo "=================="
        
        total_apks=$(find . -name "*.apk" -type f 2>/dev/null | wc -l)
        echo "🎯 总共找到APK文件: $total_apks 个"
        
        if [ $total_apks -gt 0 ]; then
          echo "✅ 🎉 APK构建成功！直接使用P4A绕过了buildozer的BUG！"
          echo "=== APK文件列表 ==="
          find . -name "*.apk" -type f -exec ls -lh {} \; | head -10
          
          echo "=== 最大的APK文件 ==="
          find . -name "*.apk" -type f -exec ls -lh {} \; | sort -k5 -hr | head -3
        else
          echo "❌ 仍然未找到APK文件"
          echo ""
          echo "🔍 可能的原因和调试信息："
          echo "1. 检查上传的 p4a_build.log 文件"
          echo "2. P4A构建可能在某个步骤失败了"
          echo "3. 需要检查P4A的具体错误信息"
          echo ""
          echo "=== P4A构建目录结构 ==="
          find . -type d -name "*apk*" 2>/dev/null | head -10 || echo "没有apk相关目录"
        fi
