name: 🤖 构建Android应用

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: ☕ 设置Java环境
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '8'
        
    - name: 📦 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip \
          build-essential libsdl2-dev libsdl2-image-dev \
          libsdl2-mixer-dev libsdl2-ttf-dev libportmidi-dev \
          libswscale-dev libavformat-dev libavcodec-dev \
          zlib1g-dev autoconf libtool pkg-config \
          libffi-dev libssl-dev
          
    - name: 🐍 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython
        pip install "kivy[base]==2.1.0"
        
    - name: 📱 设置Android SDK
      run: |
        export ANDROID_HOME=$HOME/Android/Sdk
        mkdir -p $ANDROID_HOME
        cd $ANDROID_HOME
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mv cmdline-tools latest
        mkdir cmdline-tools
        mv latest cmdline-tools/
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses >/dev/null 2>&1
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-33" >/dev/null
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;33.0.0" >/dev/null
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;25.2.9519653" >/dev/null
        
    - name: 🔧 检查和准备构建文件
      run: |
        echo "📋 当前目录文件："
        ls -la
        
        # 检查关键文件
        if [ ! -f "simple_mobile_app.py" ]; then
          echo "❌ 缺少 simple_mobile_app.py"
          exit 1
        fi
        
        if [ ! -f "buildozer.spec" ]; then
          echo "📝 创建 buildozer.spec"
          buildozer init
          # 修改配置
          sed -i 's/title = My Application/title = 交易跟单机器人/' buildozer.spec
          sed -i 's/package.name = myapp/package.name = tradingbot/' buildozer.spec
          sed -i 's/package.domain = org.example/package.domain = com.tradingbot/' buildozer.spec
          sed -i 's/source.main = main.py/source.main = simple_mobile_app.py/' buildozer.spec
          sed -i 's/requirements = python3,kivy/requirements = python3,kivy==2.1.0/' buildozer.spec
        fi
        
        echo "✅ 构建文件检查完成"
        
    - name: 🔨 构建Android APK
      run: |
        echo "🚀 开始构建Android APK..."
        export ANDROID_HOME=$HOME/Android/Sdk
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
        
        # 构建APK
        buildozer android debug
        
    - name: 📊 显示构建结果
      run: |
        echo "📦 构建完成！"
        if [ -d "bin" ]; then
          echo "📱 生成的APK文件:"
          ls -la bin/*.apk 2>/dev/null || echo "未找到APK文件"
          
          for apk in bin/*.apk; do
            if [ -f "$apk" ]; then
              echo "📏 $apk 大小: $(du -h "$apk" | cut -f1)"
            fi
          done
        else
          echo "❌ bin目录不存在"
        fi
        
    - name: 📤 上传APK文件
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: android-apk
        path: bin/*.apk
        retention-days: 30
